// Web Push Resources referenced
// https://www.npmjs.com/package/web-push/v/3.4.3
// https://web.dev/push-notifications/
// https://github.com/web-push-libs/web-push

import React, { useState, useEffect } from 'react';
import { Button } from 'semantic-ui-react';

const NotificationButton = () => {
    const [isSubscribed, setIsSubscribed] = useState(false);

    useEffect(() => {
        const checkSubscription = async () => {
            const registration = await navigator.serviceWorker.ready;
            const subscription = await registration.pushManager.getSubscription();
            setIsSubscribed(!!subscription);
        };
        checkSubscription();
    }, []);

    const SUBSCRIBE_USER_MUTATION = `
        mutation SubscribeUser($input: SubscriptionInput!) {
            subscribeUser(input: $input) {
                success
                message
            }
        }
    `;
    // Subscribe the user to push notifications
    const subscribeUser = async () => {
        try {
        // Confirm sw registered
        const registration = await navigator.serviceWorker.ready;
        const publicKey = process.env.REACT_APP_VAPID_PUBLIC_KEY;
        if (!publicKey) {
            throw new Error('VAPID public key is missing.');
        }
        // VAPID key generated by web-push in Base64
        const convertVapidKey = (publicKey) => {
        // Padding necessary to ensure key is a multiple of 4
            const padding = '='.repeat((4 - (publicKey.length % 4)) % 4);
            const base64 = (publicKey + padding)
                .replace(/-/g, '+')
                .replace(/_/g, '/');
        // Convert the Base64 string to a Uint8Array (atob is a built-in function ASCII to Binary)
            const rawData = window.atob(base64);
            return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));
        };
        const convertedVapidKey = convertVapidKey(publicKey);

        // Comm. with browser pushManager
        // Perform actual subscription of browser to push
        const subscription = await registration.pushManager.subscribe({
        // UserVisibleOnly ensures notifications are displayed to the user
            userVisibleOnly: true,
            applicationServerKey: convertedVapidKey,
        });

        // auth & p256dh encryption keys protect JSON formatted subscription data
        const subscriptionData = {
            endpoint: subscription.endpoint,
            keys: {
                auth: subscription.toJSON().keys.auth,
                p256dh: subscription.toJSON().keys.p256dh,
            },
        };
        // Send subscription data to server
        const response = await fetch('/graphql', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    query: SUBSCRIBE_USER_MUTATION,
                    variables: {
                        input: subscriptionData,
                    },
                }),
            });
            if (!response.ok) {
                throw new Error('Failed to subscribe the user');
            }
            const data = await response.json();
            console.log('User subscribed:', data);
            } catch (err) {
                console.error('Failed to subscribe the user:', err);
            }
        };

    // Initiate request for permission. If granted being subscription process
    const requestNotificationPermission = () => {
        if ('Notification' in window) {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    console.log('Permission granted for notifications');
                    subscribeUser();
                } else {
                    console.log('Permission denied for notifications');
                }
            });
        } else {
            console.log('This browser does not support notifications.');
        }
    };

    return (
        <Button onClick={requestNotificationPermission} 
        color={isSubscribed ? 'grey' : 'green'}
        disabled={isSubscribed}
        >
            {isSubscribed ? 'Notifications Enabled' : 'Enable Notifications'}
        </Button>
    );
};

export default NotificationButton;